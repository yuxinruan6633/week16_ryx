library(tidyverse)
mw = rtruncnorm(N, mean = 4, sd = 0.0001, a = 0)
mw
mw = rtruncnorm(N, mean = 4, sd = 0.0001, a = 0)
bw = rtruncnorm(N, mean = 9.7561, sd = 0.0001, a = 0)
Vs  = rtruncnorm(N, mean = 0.9, sd = 0.001, a = 0)
m0 = rtruncnorm(N, mean = 3.9000, sd = 0.0001, a = 0)
rho = rtruncnorm(N, mean = 1, sd = 0.0001, a = 0)
Fd = rtruncnorm(N, mean = 0.3, sd = 4.33e-7, a = 0)
Veq = rtruncnorm(N, mean = 0.9, sd = 0.001, a = 0)
m1 = rtruncnorm(N, mean = 4, sd = 0.0001, a = 0)
mi = rtruncnorm(N, mean = 4, sd = 0.0001, a = 0)
Cs = mw * bw /(Vs + m0/(rho * Fd))
b = (Veq + m1/(rho * Fd)) * Cs / mi
mean(b)
sd(b)
sd(b)/mean(b)
N = 100000
mw = rtruncnorm(N, mean = 4, sd = 0.0001, a = 0)
bw = rtruncnorm(N, mean = 9.7561, sd = 0.0001, a = 0)
Vs  = rtruncnorm(N, mean = 0.9, sd = 0.001, a = 0)
m0 = rtruncnorm(N, mean = 3.9000, sd = 0.0001, a = 0)
rho = rtruncnorm(N, mean = 1, sd = 0.0001, a = 0)
Fd = rtruncnorm(N, mean = 0.3, sd = 4.33e-7, a = 0)
Veq = rtruncnorm(N, mean = 0.9, sd = 0.001, a = 0)
m1 = rtruncnorm(N, mean = 4, sd = 0.0001, a = 0)
mi = rtruncnorm(N, mean = 4, sd = 0.0001, a = 0)
Cs = mw * bw /(Vs + m0/(rho * Fd))
b = (Veq + m1/(rho * Fd)) * Cs / mi
mean(b)
sd(b)
sd(b)/mean(b)
hist(b)
# 创建数据框
data <- data.frame(
mw = mw,
bw = bw,
Vs = Vs,
m0 = m0,
rho = rho,
Fd = Fd,
Veq = Veq,
m1 = m1,
mi = mi,
b = b
)
# 计算相关矩阵
cor_matrix <- cor(data)
# 提取与b的相关系数
cor_b <- cor_matrix["b", ]
# 转换为数据框
cor_b_df <- data.frame(
Variable = names(cor_b),
Correlation = cor_b
) %>%
filter(Variable != "b") %>%
arrange(desc(abs(Correlation)))
# 输出相关性结果
knitr::kable(cor_b_df, digits = 4, caption = "各变量与b的相关系数")
# 可视化相关性
ggplot(cor_b_df, aes(x = reorder(Variable, Correlation), y = Correlation)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "各变量与b的相关系数",
x = "变量",
y = "相关系数") +
theme_minimal()
# 可视化相关性
ggplot(cor_b_df, aes(x = reorder(Variable, Correlation), y = Correlation)) +
theme_classic(base_family = "ArialHei")+
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "各变量与b的相关系数",
x = "变量",
y = "相关系数") +
theme_minimal()
# 创建数据框
data <- data.frame(
mw = mw,
bw = bw,
Vs = Vs,
m0 = m0,
rho = rho,
Fd = Fd,
Veq = Veq,
m1 = m1,
mi = mi,
b = b
)
# 计算相关矩阵
cor_matrix <- cor(data)
# 提取与b的相关系数
cor_b <- cor_matrix["b", ]
# 转换为数据框
cor_b_df <- data.frame(
Variable = names(cor_b),
Correlation = cor_b
) %>%
filter(Variable != "b") %>%
arrange(desc(abs(Correlation)))
# 输出相关性结果
knitr::kable(cor_b_df, digits = 4, caption = "各变量与b的相关系数")
# 可视化相关性
ggplot(cor_b_df, aes(x = reorder(Variable, Correlation), y = Correlation)) +
theme_classic(base_family = "ArialHei")+
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "各变量与b的相关系数",
x = "变量",
y = "相关系数") +
theme_minimal()
# 创建数据框
data <- data.frame(
mw = mw,
bw = bw,
Vs = Vs,
m0 = m0,
rho = rho,
Fd = Fd,
Veq = Veq,
m1 = m1,
mi = mi,
b = b
)
# 计算相关矩阵
cor_matrix <- cor(data)
# 提取与b的相关系数
cor_b <- cor_matrix["b", ]
# 转换为数据框
cor_b_df <- data.frame(
Variable = names(cor_b),
Correlation = cor_b
) %>%
filter(Variable != "b") %>%
arrange(desc(abs(Correlation)))
# 输出相关性结果
knitr::kable(cor_b_df, digits = 4, caption = "各变量与b的相关系数")
# 可视化相关性
ggplot(cor_b_df, aes(x = reorder(Variable, Correlation), y = Correlation)) +
theme_classic(base_family = "ArialHei")+
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "各变量与b的相关系数",
x = "变量",
y = "相关系数") +
theme_minimal()
# 可视化相关性
ggplot(cor_b_df, aes(x = reorder(Variable, Correlation), y = Correlation)) +
theme_classic(base_family = "ArialHei")+
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "各变量与b的相关系数",
x = "变量",
y = "相关系数")
# 定义模型函数
model_function <- function(X) {
mw  <- X[,1]
bw  <- X[,2]
Vs  <- X[,3]
m0  <- X[,4]
rho <- X[,5]
Fd  <- X[,6]
Veq <- X[,7]
m1  <- X[,8]
mi  <- X[,9]
Cs = mw * bw /(Vs + m0/(rho * Fd))
b = (Veq + m1/(rho * Fd)) * Cs / mi
return(b)
}
# 生成参数矩阵
# 为了示例简化，这里使用较少的样本量，实际分析建议使用更多样本
library(lhs)
library(sensitivity)
# 使用拉丁超立方采样
sobol_sample <- sobolSalt(model = model_function,
n = 1000,
X1 = X1,
X2 = X2,
order = 2,
conf = 0.95,
nboot = 100)
library(sf)
library(mapchina)
china
china %>%
ggolot()+
geom_sf()
china %>%
ggplot()+
geom_sf()
p1 <-
china %>%
ggplot()+
geom_sf()
p2 <- mpg %>%
ggplot(aes(displ, hwy))+
geom_point()
p2
plot_grid(p1, p2, ncol = 1)
library(cowplot)
plot_grid(p1, p2, ncol = 1)
plot_grid(p1, p2, ncol = 1,
align = "v")
plot_grid(p1, p2, ncol = 1,
align = "v", axis = "l")
p1/p2
library(patchwork)
p1/p2
?plot_grid
plot_grid(p1, p2, ncol = 1,
align = "hv", axis = "lr")
plot_grid(p1, p2, ncol = 1,
align = "hv", axis = "lrbt")
plot_grid(p1, p2, ncol = 1,
align = "v", axis = "lrbt")
plot_grid(p1, p2, ncol = 1,
align = "h", axis = "lrbt")
p1/p2
maps
map
ggplot2::map_data()
ggplot2::map_data("world")
ggplot2::map_data("world") %>%
ggplot()+
geom_sf()
st_as_sf(ggplot2::map_data("world")) %>%
ggplot()+
geom_sf()
st_as_sf(ggplot2::map_data("world"))
125.8 * 176
125.8 * 176 *198/1000
125.8 * 176 *198/10000
colorRampPalette(colors = c("green","black"), 10)
colorRampPalette(colors = c("green","black")(10)
colorRampPalette(colors = c("green","black"))(10)
col_1 <- colorRampPalette(colors = c("green","black"))(10)
scales::show_col(col_1)
col_2 <- colorRampPalette(colors = c("green","white"))(10)
scales::show_col(col_2)
#ku0
ku0_Cu <- rtruncnorm(10000,a = 0, mean = 0.42, sd = 0.07)
ku0_Ni <- rtruncnorm(10000,a = 0, mean = 0.014, sd = 0.001)
ku0_Cd <- rtruncnorm(10000,a = 0, mean = 0.026, sd = 0.002)
ku0_Pb <- rtruncnorm(10000,a = 0, mean = 0.26, sd = 0.02)
#ku
mean_ku_Cu1 <- 0.13
sd_ku_Cu1 <- 0.03
mean_ku_Cu2 <- 0.15
sd_ku_Cu2 <- 0.04
mean_ku_Cu <- (mean_ku_Cu1 + mean_ku_Cu2) / 2
sd_ku_Cu<- sqrt((sd_ku_Cu1^2 + sd_ku_Cu2^2))
ku_Cu <- rtruncnorm(10000,a = 0, mean = mean_ku_Cu, sd = sd_ku_Cu)
mean_ku_Ni1 <- 0.018
sd_ku_Ni1 <- 0.001
mean_ku_Ni2 <- 0.017
sd_ku_Ni2 <- 0.001
mean_ku_Ni <- (mean_ku_Ni1 + mean_ku_Ni2) / 2
sd_ku_Ni<- sqrt((sd_ku_Ni1^2 + sd_ku_Ni2^2))
ku_Ni <- rtruncnorm(10000,a = 0, mean = mean_ku_Ni, sd = sd_ku_Ni)
mean_ku_Cd1 <- 0.026
sd_ku_Cd1 <- 0.002
mean_ku_Cd2 <- 0.025
sd_ku_Cd2 <- 0.002
mean_ku_Cd <- (mean_ku_Cd1 + mean_ku_Cd2) / 2
sd_ku_Cd<- sqrt((sd_ku_Cd1^2 + sd_ku_Cd2^2))
ku_Cd <- rtruncnorm(10000,a = 0, mean = mean_ku_Cd, sd = sd_ku_Cd)
mean_ku_Pb1 <- 0.24
sd_ku_Pb1 <- 0.02
mean_ku_Pb2 <- 0.25
sd_ku_Pb2 <- 0.02
mean_ku_Pb <- (mean_ku_Pb1 + mean_ku_Pb2) / 2
sd_ku_Pb<- sqrt((sd_ku_Pb1^2 + sd_ku_Pb2^2))
ku_Pb <- rtruncnorm(10000,a = 0, mean = mean_ku_Pb, sd = sd_ku_Pb)
#kig
mean_kig1 <- 1.24
sd_kig1 <- 0.18
mean_kig2 <- 2.54
sd_kig2 <- 0.65
mean_kig <- (mean_kig1 + mean_kig2) / 2
sd_kig <- sqrt((sd_kig1^2 + sd_kig2^2))
kig <- rtruncnorm(10000,a = 0, mean = mean_kig, sd = sd_kig)
#keg
mean_keg_Cu1 <- 0.95
sd_keg_Cu1 <- 0.00
mean_keg_Cu2 <- 1.17
sd_keg_Cu2 <- 0.07
mean_keg_Cu <- (mean_keg_Cu1 + mean_keg_Cu2) / 2
sd_keg_Cu<- sqrt((sd_keg_Cu1^2 + sd_keg_Cu2^2))
keg_Cu <- rtruncnorm(10000,a = 0, mean = mean_keg_Cu, sd = sd_keg_Cu)
mean_keg_Ni1 <- 2.61
sd_keg_Ni1 <- 0.20
mean_keg_Ni2 <- 2.04
sd_keg_Ni2 <- 0.11
mean_keg_Ni <- (mean_keg_Ni1 + mean_keg_Ni2) / 2
sd_keg_Ni<- sqrt((sd_keg_Ni1^2 + sd_keg_Ni2^2))
keg_Ni <- rtruncnorm(10000,a = 0, mean = mean_keg_Ni, sd = sd_keg_Ni)
mean_keg_Cd1 <- 0.0087
sd_keg_Cd1 <- 0.0000
mean_keg_Cd2 <- 0.0085
sd_keg_Cd2 <- 0.0006
mean_keg_Cd <- (mean_keg_Cd1 + mean_keg_Cd2) / 2
sd_keg_Cd<- sqrt((sd_keg_Cd1^2 + sd_keg_Cd2^2))
keg_Cd <- rtruncnorm(10000,a = 0, mean = mean_keg_Cd, sd = sd_keg_Cd)
mean_keg_Pb1 <- 11.4
sd_keg_Pb1 <- 0.78
mean_keg_Pb2 <- 10.6
sd_keg_Pb2 <- 0.77
mean_keg_Pb <- (mean_keg_Pb1 + mean_keg_Pb2) / 2
sd_keg_Pb<- sqrt((sd_keg_Pb1^2 + sd_keg_Pb2^2))
keg_Pb <- rtruncnorm(10000,a = 0, mean = mean_keg_Pb, sd = sd_keg_Pb)
#kas
mean_kas_Cu1 <- 9.85
sd_kas_Cu1 <- 0.62
mean_kas_Cu2 <- 7.83
sd_kas_Cu2 <- 0.54
mean_kas_Cu <- (mean_kas_Cu1 + mean_kas_Cu2) / 2
sd_kas_Cu<- sqrt((sd_kas_Cu1^2 + sd_kas_Cu2^2))
kas_Cu <- rtruncnorm(10000,a = 0, mean = mean_kas_Cu, sd = sd_kas_Cu)
mean_kas_Ni1 <- 0.44
sd_kas_Ni1 <- 0.03
mean_kas_Ni2 <- 0.38
sd_kas_Ni2 <- 0.03
mean_kas_Ni <- (mean_kas_Ni1 + mean_kas_Ni2) / 2
sd_kas_Ni<- sqrt((sd_kas_Ni1^2 + sd_kas_Ni2^2))
kas_Ni <- rtruncnorm(10000,a = 0, mean = mean_kas_Ni, sd = sd_kas_Ni)
mean_kas_Cd1 <- 1.06
sd_kas_Cd1 <- 0.08
mean_kas_Cd2 <- 0.89
sd_kas_Cd2 <- 0.07
mean_kas_Cd <- (mean_kas_Cd1 + mean_kas_Cd2) / 2
sd_kas_Cd<- sqrt((sd_kas_Cd1^2 + sd_kas_Cd2^2))
kas_Cd <- rtruncnorm(10000, mean = mean_kas_Cd, sd = sd_kas_Cd)
mean_kas_Pb1 <- 2.18
sd_kas_Pb1 <- 0.17
mean_kas_Pb2 <- 1.20
sd_kas_Pb2 <- 0.09
mean_kas_Pb <- (mean_kas_Pb1 + mean_kas_Pb2) / 2
sd_kas_Pb<- sqrt((sd_kas_Pb1^2 + sd_kas_Pb2^2))
kas_Pb <- rtruncnorm(10000,a = 0, mean = mean_kas_Pb, sd = sd_kas_Pb)
#AE
AE_Cu <- kas_Cu / (keg_Cu + kas_Cu)
AE_Ni <- kas_Ni / (keg_Ni + kas_Ni)
AE_Cd <- kas_Cd / (keg_Cd + kas_Cd)
AE_Pb <- kas_Pb / (keg_Pb + kas_Pb)
mean_AE_Cu <- mean(AE_Cu)
sd_AE_Cu <- sd(AE_Cu)
mean_AE_Ni <- mean(AE_Ni)
sd_AE_Ni <- sd(AE_Ni)
mean_AE_Cd <- mean(AE_Cd)
sd_AE_Cd <- sd(AE_Cd)
mean_AE_Pb <- mean(AE_Pb)
sd_AE_Pb <- sd(AE_Pb)
#Algae
Algae <- 44.80
#Kd
Kd_Cu <- 11830.42395
Kd_Ni <- 742.2213763
Kd_Cd <- 1264.667384
Kd_Pb <- 122312.3567
#IR
IR <- kig*Algae*10^(-3)
#RCp
RCp_Cu <- (IR*AE_Cu*Kd_Cu*10^(-3))/(ku_Cu+(IR*AE_Cu*Kd_Cu*10^(-3)))
RCp_Ni <- (IR*AE_Ni*Kd_Ni*10^(-3))/(ku_Ni+(IR*AE_Ni*Kd_Ni*10^(-3)))
RCp_Cd <- (IR*AE_Cd*Kd_Cd*10^(-3))/(ku_Cd+(IR*AE_Cd*Kd_Cd*10^(-3)))
RCp_Pb <- (IR*AE_Pb*Kd_Pb*10^(-3))/(ku_Pb+(IR*AE_Pb*Kd_Pb*10^(-3)))
mean_RCp_Cu <- mean(RCp_Cu)
sd_RCp_Cu <- sd(RCp_Cu)
mean_RCp_Ni <- mean(RCp_Ni)
sd_RCp_Ni <- sd(RCp_Ni)
mean_RCp_Cd <- mean(RCp_Cd)
sd_RCp_Cd <- sd(RCp_Cd)
mean_RCp_Pb <- mean(RCp_Pb)
sd_RCp_Pb <- sd(RCp_Pb)
RCp_data <- data.frame(
Metal = c("Cu", "Ni", "Cd", "Pb"),
RCp_mean = c(mean_RCp_Cu, mean_RCp_Ni, mean_RCp_Cd, mean_RCp_Pb),
RCp_sd = c(sd_RCp_Cu, sd_RCp_Ni, sd_RCp_Cd, sd_RCp_Pb))
print(RCp_data)
RCp <- ggplot(RCp_data, aes(reorder(Metal, -RCp_mean), y = RCp_mean*100)) +
theme_classic()+
theme(axis.text = element_text(color = "black"))+
geom_bar(stat = "identity", position = "dodge", width = 0.6,fill = "#7985b3") +
geom_errorbar(aes(ymin = (RCp_mean - RCp_sd)*100, ymax = (RCp_mean + RCp_sd)*100),
width = 0.2, ,color = "#7985b3",
position = position_dodge(0.7)) +
labs(y = expression("RC"["p"]*" (%)"), x = NULL)+
scale_y_continuous(limits = c(0,100))
RCp
#RR#
RR_Cu <- (ku_Cu+IR*AE_Cu*Kd_Cu*10^(-3))/(ku0_Cu*(Kd_Cu*Algae*10^(-6)+1))
RR_Ni <- (ku_Ni+IR*AE_Ni*Kd_Ni*10^(-3))/(ku0_Ni*(Kd_Ni*Algae*10^(-6)+1))
RR_Cd <- (ku_Cd+IR*AE_Cd*Kd_Cd*10^(-3))/(ku0_Cd*(Kd_Cd*Algae*10^(-6)+1))
RR_Pb <- (ku_Pb+IR*AE_Pb*Kd_Pb*10^(-3))/(ku0_Pb*(Kd_Pb*Algae*10^(-6)+1))
mean_RR_Cu <- mean(RR_Cu)
sd_RR_Cu <- sd(RR_Cu)
mean_RR_Ni <- mean(RR_Ni)
sd_RR_Ni <- sd(RR_Ni)
mean_RR_Cd <- mean(RR_Cd)
sd_RR_Cd <- sd(RR_Cd)
mean_RR_Pb <- mean(RR_Pb)
sd_RR_Pb <- sd(RR_Pb)
RR_data <- data.frame(
Metal = c("Cu", "Ni", "Cd", "Pb"),
RR_mean = c(mean_RR_Cu, mean_RR_Ni, mean_RR_Cd, mean_RR_Pb),
RR_sd = c(sd_RR_Cu, sd_RR_Ni, sd_RR_Cd, sd_RR_Pb))
print(RR_data)
RR_ttext <- data.frame(RR_Cu = RR_Cu,RR_Ni = RR_Ni,RR_Cd = RR_Cd,RR_Pb = RR_Pb)
t.test(RR_ttext $RR_Cu, mu=1)
t.test(RR_ttext $RR_Ni, mu=1)
t.test(RR_ttext $RR_Cd, mu=1)
t.test(RR_ttext $RR_Pb, mu=1)
print(RR_data)
RR_ttext $RR_Cu
RR_ttext $RR_Cu
plot(RR_ttext $RR_Cu)
mean(RR_ttext $RR_Cu)
sd(RR_ttext $RR_Cu)
t.test(RR_ttext $RR_Cu, 1)
t.test(RR_ttext $RR_Cu, mu = 1)
mean(RR_ttext $RR_Cu)
sd(RR_ttext $RR_Cu)
RR_ttext $RR_Cu
plot(unlist(RR_ttext $RR_Cu))
unlist(RR_ttext $RR_Cu)
t.test(unlist(RR_ttext $RR_Cu), mu = 1)
class(unlist(RR_ttext $RR_Cu))
class(rnorm(1000, 1, 0.3))
class(RR_ttext $RR_Cu)
mean(RR_ttext $RR_Cu)
sd(RR_ttext $RR_Cu)
t.test(rnorm(1000, 1.66, 0.6), mu = 1)
t.test(rnorm(1000, 1.66, 0.6), mu = 1.66)
t.test(rnorm(1000, 1.66, 0.6), mu = 1.67)
t.test(rnorm(1000, 1.66, 0.6), mu = 1.68)
t.test(rnorm(1000, 1.66, 0.6), mu = 1.69)
t.test(rnorm(1000, 1.66, 0.6), mu = 1.71)
t.test(rnorm(1000, 1.66, 0.6), mu = 1.64)
t.test(RR_ttext $RR_Pb, mu=1)
density(RR_ttext $RR_Pb)
hist(RR_ttext $RR_Pb)
RR_data
x - x^3/factorial(3) + x^5/factorial(5) - x^7/factorial(7)
function(x)  x - x^3/factorial(3) + x^5/factorial(5) - x^7/factorial(7)
f-sin <- function(x)  x - x^3/factorial(3) + x^5/factorial(5) - x^7/factorial(7)
f_sin <- function(x)  x - x^3/factorial(3) + x^5/factorial(5) - x^7/factorial(7)
f_sin(pi/2)
f_sin(pi/4)
f_sin <- function(x)  x - x^3/factorial(3) + x^5/factorial(5) - x^7/factorial(7) + x^9/factorial(9) - x^11/factorial(11)
f_sin(pi/4)
f_sin(pi/2)
f_sin <- function(x)  x - x^3/factorial(3) + x^5/factorial(5) - x^7/factorial(7) + x^9/factorial(9) - x^11/factorial(11) + x^13/factorial(13) - x^15/factorial(15)
f_sin(pi/2)
f_sin(pi/6)
f_sin(pi/3)
f_sin(pi/2)
f_sin(pi/4)
sqrt(2)/2
print(f_sin(pi/4), 10)
print(sqrt(2)/2, 10)
print(f_sin(pi/4), 20)
print(sqrt(2)/2, 20)
print(f_sin(pi/2), 20)
120 * 14
install.packages("phreeqc")
install.packages("phreeqc")
install.packages("~/Downloads/phreeqc_3.8.7.tgz", repos = NULL, type = .Platform$pkgType, lib="/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library")
1
library(phreeqc)
system.file("extdata", "phreeqc.dat", package = "phreeqc")
# Locate the database included with the package
db_path <- system.file("extdata", "phreeqc.dat", package = "phreeqc")
phrLoadDatabase(db_path)
install.packages("phreeqc")
1
system.file( package = "phreeqc")
install.packages("phreeqc")
install.packages("phreeqc")
install.packages("~/Downloads/phreeqc_3.8.7.tgz", repos = NULL, type = .Platform$pkgType, lib="/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library")
system.file( package = "phreeqc")
system.file("extdata", "phreeqc.dat", package = "phreeqc")
library(phreeqc)
phreeqc::ex1
c(0.52010, 0.28265, 0.56455, 0.16170, 0.03180)
log(c(0.52010, 0.28265, 0.56455, 0.16170, 0.03180))
mean(log(c(0.52010, 0.28265, 0.56455, 0.16170, 0.03180)))
exp(mean(log(c(0.52010, 0.28265, 0.56455, 0.16170, 0.03180))))
## Example data:
# Suppose you have vectors of concentrations C and weights W for i=1..10
C <- c(1.2, 0.9, 1.7, 2.3, 1.1, 0.8, 1.5, 2.0, 2.4, 1.9)  # Example Cd concentrations
W <- c(10,  8,   12,  15,  9,   7,   11,  14,  16,  13)    # Example sizes
## Put data in a data frame:
df <- data.frame(C = C, W = W)
## Fit linear regression on log-transformed variables:
fit <- lm(log(C) ~ log(W), data = df)
summary(fit)
## Extract the slope b:
b <- coef(fit)[2]  # coefficient for log(W)
b
## Choose a standard size S:
S <- 10  # e.g., normalize all mussels to size = 10
## Compute size-normalized concentrations:
df$Cnorm <- df$C * (S / df$W)^b
## Inspect results:
df
residuals(fit)
predict(fit, 10)
predict(fit, c(10))
predict(fit, data.frame(W = 10))
(predict(fit, data.frame(W = 10)) + residuals(fit))
exp(predict(fit, data.frame(W = 10)) + residuals(fit))
setwd("~/Documents/GitHub/HeWY_2025_MPB/docs")
